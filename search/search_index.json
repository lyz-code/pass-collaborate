{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pass-collaborate","text":"<p>A <code>pass</code> extension that helps collectives manage the access to their passwords.</p> <p>It allows you to choose which users or groups have access to the different parts of your password store in a more pleasant way than editing the <code>.gpg-id</code> files manually by making easy to:</p> <ul> <li>Create new users and groups.</li> <li>Granting or removing permissions of users or groups to parts of your store.</li> <li>Checking which passwords does a user or group have access to.</li> </ul>"},{"location":"#installing","title":"Installing","text":"<pre><code>pip install pass-collaborate\npass_collaborate init\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#user-management","title":"User management","text":"<p>To add a new user you can run:</p> <pre><code>pass user add user_identifier\n</code></pre> <p>Where <code>user_identifier</code> can be it's name, email or GPG key. <code>pass_collaborate</code> will check your GPG key store for keys that match that identifier and will fill the required data.</p> <p>If you don't like the <code>name</code> or <code>email</code> defined in the GPG key, you can override the stored values with the <code>--name</code> and <code>--email</code> flags. For example:</p> <pre><code>pass user add lyz@riseup.net --name Lyz\n</code></pre> <p>You may not need to create the users though, <code>pass_collaborate</code> tries to create them for you on the first run. You can check the existing users with <code>pass user list</code>.</p> <p>If you'd like to edit any field of the users, you can open the <code>.auth.yaml</code> file directly. </p>"},{"location":"#group-management","title":"Group management","text":"<p>It's more convenient to manage authorisation permissions for a group of users. To create one use:</p> <pre><code>pass group add group_name user1 user2\n</code></pre> <p>Where:</p> <ul> <li><code>group_name</code>: is a unique group name.</li> <li><code>user1</code>, <code>user2</code>, ...: are user identifiers of already available users. It can be their names, emails or gpg keys.</li> </ul> <p>Once a group is created, you can add new users with:</p> <pre><code>pass group add-users user3 user4 group_name\n</code></pre> <p>Or remove them with:</p> <pre><code>pass group remove-users user3 user4 group_name\n</code></pre> <p>Every time you change the users of a group, <code>pass_collaborate</code> will reencrypt the passwords associated to that group with the new user list.</p> <p>To list the available groups run:</p> <pre><code>pass group list\n</code></pre> <p>And to get the information of a group use:</p> <pre><code>pass group show group_name\n</code></pre>"},{"location":"#authorisation","title":"Authorisation","text":"<p>To grant access to a group to the directories of your password store you can use:</p> <pre><code>pass group authorize group_name pass/path/1 pass/path/2\n</code></pre> <p>If it's the first time you <code>authorize</code> a password path, <code>pass_collaborate</code> will grant access to the <code>group_name</code> members in addition to the people that already had access to that path. For example, imagine we start with a password store that has a <code>.gpg-id</code> file at the top that grants access to <code>admin@example.org</code> to all the passwords stored. When we run <code>pass group authorize developers web</code>, <code>pass_collaborate</code> will create a new <code>.gpg-id</code> file on the <code>web</code> directory granting access both to <code>admin</code> and to the members of the <code>developers</code> group. This is done this way to prevent you from locking yourself out unintentionally. If you only want <code>developers</code> to have access to the directory (not <code>admin</code> or any of the keys defined in the parent directories), you can use the <code>--ignore-parent</code> flag. For example:</p> <pre><code>pass group authorize --ignore-parent developers web\n</code></pre> <p>To remove access to a group to the directories of your password store you can use:</p> <pre><code>pass group revoke group_name pass/path/1 pass/path/2\n</code></pre>"},{"location":"#check-access","title":"Check access","text":"<p>As your password store begins to grow or you start refining the permissions of the different groups and users it may be easy to get lost on who has access to what. You can check what passwords does a group or user have access with:</p> <pre><code>pass access identifier\n</code></pre> <p>Where <code>identifier</code> can be a user name, email, gpg key or group name.</p>"},{"location":"#how-does-it-work","title":"How does it work","text":"<p><code>pass_collaborate</code> interacts with your password store to make the required changes in order to fulfill the desired task. To be able to do it it uses the information of:</p> <ul> <li>Your GPG key store.</li> <li>The information stored in your <code>pass</code> store (password files and <code>.gpg-id</code> files).</li> </ul> <p>To store the data that is not available in the above storages, <code>pass_collaborate</code> uses an <code>.auth.yaml</code> file that is stored by default in <code>~/.password-store/.auth.yaml</code>. You can override this path with the environment variable <code>PASSWORD_AUTH_DIR</code> or the <code>--auth-dir</code> command line flag.</p> <p>This is useful if the shared password store is a subdirectory of your main password store.</p>"},{"location":"#references","title":"References","text":"<p>As most open sourced programs, <code>pass-collaborate</code> is standing on the shoulders of giants, namely:</p> Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks. Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme. Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer."},{"location":"#contributing","title":"Contributing","text":"<p>For guidance on setting up a development environment, and how to make a contribution to pass-collaborate, see Contributing to pass-collaborate.</p>"},{"location":"#donations","title":"Donations","text":"<p> or </p> <p>If you are using some of my open-source tools, have enjoyed them, and want to say \"thanks\", this is a very strong way to do it.</p> <p>If your product/company depends on these tools, you can sponsor me to ensure I keep happily maintaining them.</p> <p>If these tools are helping you save money, time, effort, or frustrations; or they are helping you make money, be more productive, efficient, secure, enjoy a bit more your work, or get your product ready faster, this is a great way to show your appreciation. Thanks for that!</p> <p>And by sponsoring me, you are helping make these tools, that already help you, sustainable and healthy.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>So you've started using <code>pass-collaborate</code> and want to show your gratitude to the project, depending on your programming skills there are different ways to do so.</p>"},{"location":"contributing/#i-dont-know-how-to-program","title":"I don't know how to program","text":"<p>There are several ways you can contribute:</p> <ul> <li>Open an issue if you encounter     any bug or to let us know if you want a new feature to be implemented.</li> <li>Spread the word about the program.</li> <li>Review the documentation and try to improve     it.</li> </ul>"},{"location":"contributing/#i-know-how-to-program-in-python","title":"I know how to program in Python","text":"<p>If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones, check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues, as they are expected to be easier to get into the project.</p> <p>We develop the program with TDD, so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it.</p> <p>We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing:</p> <ul> <li>If you want to develop a new feature, explain how you'd like to do it in the related issue.</li> <li>If you don't know how to test your code, do the pull request without the tests     and we'll try to do them for you.</li> </ul>"},{"location":"contributing/#issues","title":"Issues","text":"<p>Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead.</p> <p>To make it as simple as possible for us to help you, please include the output of the following call in your issue:</p> <pre><code>python -c \"import pass_collaborate.version; print(pass_collaborate.version.version_info())\"\n</code></pre> <p>or if you have <code>make</code> installed, you can use <code>make version</code>.</p> <p>Please try to always include the above unless you're unable to install <code>pass-collaborate</code> or know it's not relevant to your question or feature request.</p>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>pass-collaborate is released regularly so you should see your improvements release in a matter of days or weeks.</p> <p>Note</p> <p>Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request.</p> <p>If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.</p>"},{"location":"contributing/#development-facilities","title":"Development facilities","text":"<p>To make contributing as easy and fast as possible, you'll want to run tests and linting locally.</p> <p>tl;dr: use <code>make format</code> to fix formatting, <code>make</code> to run tests and linting &amp; <code>make docs</code> to build the docs.</p> <p>You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed.</p> <ul> <li> <p>Clone your fork and go into the repository directory:</p> <pre><code>git clone git@github.com:&lt;your username&gt;/pass-collaborate.git\ncd pass-collaborate\n</code></pre> </li> <li> <p>Set up the virtualenv for running tests:</p> <pre><code>virtualenv -p `which python3.7` env\nsource env/bin/activate\n</code></pre> </li> <li> <p>Install <code>pdm</code> our package manager with the next command or using any of the     other recommended     methods.</p> <pre><code>curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 -\n</code></pre> </li> <li> <p>Install pass-collaborate, dependencies and configure the     pre-commits:</p> <pre><code>make install\n</code></pre> </li> <li> <p>Checkout a new branch and make your changes:</p> <pre><code>git checkout -b my-new-feature-branch\n</code></pre> </li> <li> <p>Fix formatting and imports: pass-collaborate uses     black to enforce formatting and     isort to fix imports.</p> <pre><code>make format\n</code></pre> </li> <li> <p>Run tests and linting:</p> <pre><code>make\n</code></pre> <p>There are more sub-commands in Makefile like <code>test-code</code>, <code>test-examples</code>, <code>mypy</code> or <code>security</code> which you might want to use, but generally <code>make</code> should be all you need.</p> <p>If you need to pass specific arguments to pytest use the <code>ARGS</code> variable, for example <code>make test ARGs='-k test_markdownlint_passes'</code>.</p> </li> <li> <p>Build documentation: If you have changed the documentation, make sure it     builds the static site. Once built it will serve the documentation at     <code>localhost:8000</code>:</p> <pre><code>make docs\n</code></pre> </li> <li> <p>Commit, push, and create your pull request.</p> </li> <li> <p>Make a new release: To generate the changelog of the new changes, build the     package, upload to pypi and clean the build files use <code>make bump</code>.</p> </li> </ul> <p>We'd love you to contribute to pass-collaborate!</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#pass_collaborate","title":"<code>pass_collaborate</code>","text":"<p>A pass extension that helps collectives manage the access to their passwords.</p>"},{"location":"adr/adr/","title":"Adr","text":"<p>ADR are short text documents that captures an important architectural decision made along with its context and consequences.</p> <pre><code>graph TD\n    001[001: High level analysis]\n    002[002: Initial Program design]\n\n    001 -- Extended --&gt; 002\n\n    click 001 \"https://lyz-code.github.io/pass-collaborate/adr/001-high_level_problem_analysis\" _blank\n    click 002 \"https://lyz-code.github.io/pass-collaborate/adr/002-initial_program_design\" _blank\n\n    001:::draft\n    002:::draft\n\n    classDef draft fill:#CDBFEA;\n    classDef proposed fill:#B1CCE8;\n    classDef accepted fill:#B1E8BA;\n    classDef rejected fill:#E8B1B1;\n    classDef deprecated fill:#E8B1B1;\n    classDef superseeded fill:#E8E5B1;</code></pre>"}]}